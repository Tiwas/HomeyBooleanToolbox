{
  "settings": {
    "title": "Settings",
    "description": "Configure your Boolean Toolbox logic device",
    "save": "Save",
    "cancel": "Cancel",
    "reset": "Reset to default",
    "saved": "Settings saved",
    "error": "Could not save settings",
    "changed": "Settings changed:",
    "applied": "Settings applied successfully",
    "formatting": "Will auto-format {type} JSON",
    "applying_formatted": "Applying auto-formatted settings...",
    "auto_formatted": "Settings auto-formatted",
    "format_failed": "Failed to auto-format settings:"
  },
  "pair": {
    "title": "Add logic device",
    "intro": "Create a new logic device to evaluate complex formulas",
    "name": "Device name",
    "name_placeholder": "My logic device",
    "configure": "Configure device",
    "add": "Add device",
    "success": "Device added successfully",
    "error": "Could not add device",
    "session_started": "Pairing session started",
    "get_num_inputs": "[PAIR] get_num_inputs called",
    "set_num_inputs": "[PAIR] set_num_inputs called with data:",
    "get_zones": "[PAIR] get_zones called",
    "get_zones_error": "[PAIR] ERROR in get_zones:",
    "get_devices_in_zone": "[PAIR] get_devices_in_zone called for zone: {zone}",
    "get_devices_error": "[PAIR] ERROR in get_devices_in_zone:",
    "set_input_links": "[PAIR] set_input_links called",
    "set_device_name": "[PAIR] set_device_name called with:",
    "create_device": "[PAIR] create_device called",
    "creating_device": "[PAIR] Creating device:",
    "handlers_registered": "Pairing handlers registered"
  },
  "device": {
    "ready": "Device ready: {name}",
    "initializing": "Logic Device '{name}' initializing.",
    "initialized": "Logic Device '{name}' initialized with {count} inputs",
    "capacity_expanded": "Detected {detected} inputs needed (originally {original}). Expanding capacity.",
    "capacity_updated": "Updating capacity: {old} â†’ {new} inputs",
    "max_input_detected": "Detected max input: {input} ({count} inputs needed)",
    "capability_readonly": "Set onoff as read-only",
    "capability_options_failed": "Could not set capability options:",
    "capability_update_failed": "Capability update failed for {capability}:",
    "capability_skip_deleted": "(safe) Skipping {capability} â€“ device no longer exists.",
    "deleted_cleanup": "Device deleted â€“ cleaning up listeners & timers",
    "cleanup_complete": "Cleanup complete",
    "deleted_skip_update": "Device deleted, skipping capability update",
    "deleted_skip_flow": "Device deleted, skipping flow trigger",
    "logic_unit_name": "Logic Unit ({count} inputs)"
  },
  "formula": {
    "default_name": "Main Formula",
    "default_name_alt": "Formula 1",
    "initialized": "Initialized {count} formulas",
    "details": "  - {name}: \"{expression}\" (enabled: {enabled})",
    "reinitialized": "Re-initialized {count} formulas",
    "timed_out": "Formula '{name}' timed out after {timeout}s",
    "evaluated_count": "Evaluated {count} formulas",
    "expression_empty": "Expression cannot be empty",
    "invalid_tokens": "Invalid tokens in expression: \"{tokens}\"",
    "invalid_syntax": "Invalid expression syntax: {message}",
    "no_expression": "(no expression)",
    "error_validation": "Formula '{name}': {error}",
    "result_debug": "getFormulaResult: Formula '{name}' ({id}) result = {result} (type: {type})",
    "not_found_or_disabled": "Formula '{id}' not found or disabled.",
    "unlocked_inputs": "ðŸ”“ Unlocked all inputs for formula '{name}'",
    "waiting_for_inputs": "Formula '{name}': Waiting for inputs. Required: [{required}]",
    "evaluating_expression": "Evaluating: \"{expression}\" â†’ \"{evalExpression}\"",
    "result": "Formula '{name}' result: {result}",
    "all_inputs_defined": "Formula '{name}': All inputs defined, evaluating...",
    "missing_inputs": "Formula '{name}': Missing inputs:",
    "evaluation_failed": "Failed to evaluate formula '{name}': {message}",
    "get_result_not_found": "getFormulaResult: Formula '{id}' not found",
    "set_input_error": "setInputForFormula error:",
    "name": "Formula",
    "expression": "Expression",
    "input": "Input",
    "output": "Output",
    "evaluation": "Evaluation",
    "evaluating": "Evaluating formula...",
    "evaluated": "Formula evaluated",
    "error": "Formula error",
    "timeout": "Formula evaluation timeout",
    "invalid": "Invalid formula",
    "syntax_error": "Syntax error in formula"
  },
  "devicelinks": {
    "setting_up": "Setting up device links...",
    "complete": "Device links setup complete",
    "count": "Setting up {count} device links",
    "unregistered": "Unregistered listener: {key}",
    "error_unregister": "Error unregistering listener:",
    "setup_failed": "Failed to setup listener for input {input}:",
    "error_cleanup": "Error cleaning up listener:"
  },
  "initial": {
    "fetching_all": "Fetching initial values for all inputs...",
    "api_unavailable": "App API not available for fetching initial values",
    "fetching_input": "[{input}] Fetching initial value...",
    "device_not_found": "[{input}] Device not found",
    "capability_not_found": "[{input}] Capability {capability} not found",
    "value_received": "[{input}] Initial value: {value} â†’ {boolean}",
    "received_value": "[{input}] Received initial value: {value}",
    "no_value_waiting": "[{input}] No initial value found - waiting for first event",
    "error": "[{input}] Error fetching initial value:"
  },
  "evaluation": {
    "running_initial": "Running initial formula evaluation...",
    "initial_complete": "Initial evaluation of all formulas...",
    "no_formulas_ready": "No formulas could be evaluated - waiting for input values",
    "reevaluating_all": "Re-evaluating all formulas (resetting locks)..."
  },
  "listener": {
    "registered": "[{input}] Listening to device {device} capability {capability}",
    "device_not_found": "[{input}] Device {device} not found",
    "capability_not_exist": "[{input}] Capability {capability} does not exist on device {device}",
    "polling_setup": "[{input}] Set up polling for {device} ({capability})",
    "capability_changed": "[{input}] Capability '{capability}' changed: {value} â†’ {boolean}",
    "error_setup": "Error setting up listener for input {input}:",
    "setting_up": "Setting up listener for input {input}",
    "invalid_config": "Invalid link configuration for input {input}",
    "api_unavailable": "App API not available for listener setup",
    "device_found": "Found device: {device}",
    "capability_found": "Device has capability: {capability}",
    "event_received": "Event received for input {input}",
    "registering": "Registering capability listener for {capability}..."
  },
  "polling": {
    "all_inputs": "Polling all linked device inputs...",
    "no_links": "No inputLinks available for polling",
    "api_unavailable": "App API not available for polling",
    "input": "Polling input \"{input}\" from device \"{device}\" capability \"{capability}\"",
    "device_not_found": "Device not found: {device}",
    "no_value": "No value for {input} ({capability})",
    "value_received": "Polled {input}: {value} â†’ {boolean}",
    "failed": "Failed to poll {input}:"
  },
  "parse": {
    "error_formulas": "Failed to parse formulas:",
    "error_input_links": "Failed to parse input_links:",
    "error_formulas_json": "Could not parse formulas:",
    "error_formulas_invalid": "Invalid formulas JSON: {message}",
    "error_input_links_invalid": "Invalid input_links JSON: {message}",
    "error_detecting_inputs": "Error detecting required inputs:"
  },
  "refetch": {
    "reason": "Re-fetching inputs (reason: {reason})...",
    "invoked": "Refetch and evaluate invoked (source={source})",
    "parse_failed": "Failed to parse input_links during refetch:",
    "no_links": "No input links available during refetch; skipping value fetch.",
    "fetching_values": "Refetching initial values before evaluation..."
  },
  "timeout": {
    "error": "Error triggering timeout:"
  },
  "flow": {
    "triggered": "Triggering flow for formula '{name}' change to {result}",
    "trigger_error": "Error triggering flow:"
  },
  "driver": {
    "ready": "Driver ready",
    "ensure_unique_failed": "ensureUniqueDeviceName failed:"
  },
  "debug": {
    "raw_formulas": "Raw formulas input from settings:",
    "raw_input_links": "Raw input_links from settings:"
  },
  "app": {
    "athom_api_loaded": "athom-api loaded successfully",
    "homey_api_extracted": "HomeyAPI extracted, type:",
    "initializing_homey_api": "Initializing HomeyAPI.forCurrentHomey...",
    "homey_api_not_function": "HomeyAPI.forCurrentHomey is not a function",
    "homey_api_methods": "HomeyAPI methods:",
    "error_stack": "Error stack:",
    "getting_zones": "Getting available zones...",
    "found_zones": "Found {count} zones",
    "error_getting_zones": "Error getting zones:",
    "getting_devices_for_zone": "Getting devices for zone ID: {zoneId}",
    "found_devices_in_zone": "Found {count} devices in zone {zoneId}",
    "error_getting_devices": "Error getting devices for zone {zoneId}:",
    "registering_flow_cards": "Registering flow cards...",
    "condition_check": "Condition check: Formula '{formulaName}' result = {result}, checking if it is '{expected}'",
    "formula_not_evaluated": "Condition: Formula '{formulaName}' has not been evaluated yet (result is {result})",
    "running_evaluation": "Running evaluation. Input: {input}, Rules: '{rules}'",
    "evaluation_finished": "Evaluation finished. Output: {output}",
    "value_outside_logic": "Value {input} is outside the defined logic.",
    "checking_for_error": "Checking for error. Input: '{textInput}', Has error: {hasError}",
    "flow_cards_registered": "Flow cards registered"
  },
  "errors": {
    "generic": "An error occurred",
    "timeout": "Operation timeout",
    "invalid_input": "Invalid input value",
    "invalid_formula": "Invalid formula expression",
    "evaluation_failed": "Formula evaluation failed",
    "device_not_found": "Device not found",
    "permission_denied": "Permission denied",
    "connection_failed": "Connection failed",
    "unknown": "Unknown error occurred"
  },
  "notifications": {
    "formula_updated": "Formula updated",
    "input_received": "Input received",
    "output_changed": "Output changed",
    "error_cleared": "Error status cleared",
    "device_ready": "Device is ready",
    "reevaluating": "Re-evaluating all formulas..."
  },
  "common": {
    "yes": "Yes",
    "no": "No",
    "true": "True",
    "false": "False",
    "enabled": "Enabled",
    "disabled": "Disabled",
    "on": "On",
    "off": "Off",
    "unknown": "Unknown",
    "loading": "Loading...",
    "processing": "Processing...",
    "done": "Done",
    "failed": "Failed",
    "success": "Success",
    "warning": "Warning",
    "info": "Information",
    "min": "Minimum",
    "max": "Maximum",
    "value": "Value",
    "name": "Name",
    "type": "Type",
    "state": "State"
  },
  "inputs": {
    "label": "Input",
    "value": "Value",
    "locked": "Input locked",
    "unlocked": "Input unlocked",
    "locked_first_impression": "Input '{input}' locked for formula '{formula}' (firstImpression mode)",
    "setting_value": "Setting input '{input}' to {value} for formula '{formula}' (was: {oldValue})",
    "locked_at_value": "ðŸ”’ Input '{input}' locked at value {value} (firstImpression mode)",
    "first_impression": "First impression mode",
    "timeout_detected": "Timeout detected on input",
    "waiting": "Waiting for input..."
  },
  "operators": {
    "and": "AND",
    "or": "OR",
    "not": "NOT",
    "greater_than": "Greater than",
    "less_than": "Less than",
    "equal": "Equal",
    "not_equal": "Not equal",
    "greater_or_equal": "Greater or equal",
    "less_or_equal": "Less or equal"
  },
  "help": {
    "formula_syntax": "Use logical operators like AND, OR, NOT to create your formula",
    "input_values": "Input values are automatically updated when connected devices change",
    "timeout_warning": "If an input is not updated within the timeout period, it will be marked",
    "first_impression": "First impression mode locks inputs at their first received value"
  }
}