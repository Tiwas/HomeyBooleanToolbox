# Logger.js - Visual Cheat Sheet

```
┌─────────────────────────────────────────────────────────────────┐
│                       LOGGER.JS SYSTEM                          │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│  INITIALIZE (in BaseLogicDriver or other module)                │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  const Logger = require('./Logger');                            │
│                                                                 │
│  async onInit() {                                               │
│    // ✅ RECOMMENDED - flexible via config                     │
│    this.logger = new Logger(this, 'MyDriver');                  │
│                                                                 │
│    // ❌ AVOID - locks the level                               │
│    // this.logger = new Logger(this, 'MyDriver',                │
│    //                          { level: 'DEBUG' });             │
│  }                                                              │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│  LOG LEVELS - WHAT SHOWS WHEN?                                  │
├────────┬───────┬──────┬──────┬───────┬─────────────────────────┤
│ Method │ DEBUG │ INFO │ WARN │ ERROR │ Use for                 │
├────────┼───────┼──────┼──────┼───────┼─────────────────────────┤
│ debug  │  ✅  │  ❌  │  ❌  │  ❌   │ Detailed debugging     │
│ info   │  ✅  │  ✅  │  ❌  │  ❌   │ Normal operation       │
│ warn   │  ✅  │  ✅  │  ✅  │  ❌   │ Warnings               │
│ error  │  ✅  │  ✅  │  ✅  │  ✅   │ Errors                 │
├────────┴───────┴──────┴──────┴───────┴─────────────────────────┤
│ SPECIALIZED (all are DEBUG except device/flow = INFO)          │
├────────┬───────┬──────┬──────┬───────┬─────────────────────────┤
│formula │  ✅  │  ❌  │  ❌  │  ❌   │ Formula calculations   │
│ input  │  ✅  │  ❌  │  ❌  │  ❌   │ Incoming data          │
│ output │  ✅  │  ❌  │  ❌  │  ❌   │ Outgoing data          │
│ api    │  ✅  │  ❌  │  ❌  │  ❌   │ API calls              │
│ device │  ✅  │  ✅  │  ❌  │  ❌   │ Device events          │
│ flow   │  ✅  │  ✅  │  ❌  │  ❌   │ Flow cards             │
└────────┴───────┴──────┴──────┴───────┴─────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│  CONFIGURATION (lib/loggerConfig.js)                            │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  module.exports = {                                             │
│    // Default for all                                           │
│    defaultLevel: 'INFO',                                        │
│                                                                 │
│    // // Override specific                                      │
│    categoryLevels: {                                            │
│      'MyDriver': 'DEBUG',      // This one gets DEBUG           │
│      'OtherDriver': 'WARN'     // This one gets WARN            │
│    }                                                            │
│  };                                                             │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│  PRIORITY (highest to lowest)                                   │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  1. Level in code (options parameter) ⚠️ OVERRIDES ALL         │
│     new Logger(this, 'Name', { level: 'DEBUG' })                │
│                                                                 │
│  2. 2. categoryLevels in loggerConfig.js                        │
│     categoryLevels: { 'Name': 'DEBUG' }                         │
│                                                                 │
│  3. 3. defaultLevel in loggerConfig.js                          │
│     defaultLevel: 'INFO'                                        │
│                                                                 │
│  4. Hardcoded default                                           │
│     'INFO'                                                      │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│  MOST COMMON COMMANDS                                           │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  // Normal operation (INFO level)                               │
│  this.logger.info('Driver started');                            │
│  this.logger.device('Device paired:', name);                    │
│  this.logger.flow('Flow card triggered');                       │
│                                                                 │
│  // Debugging (DEBUG level)                                     │
│  this.logger.debug('Values:', { a: 1, b: 2 });                  │
│  this.logger.formula('A AND B =', result);                      │
│  this.logger.input('Received:', data);                          │
│  this.logger.output('Sending:', data);                          │
│  this.logger.api('GET /devices');                               │
│                                                                 │
│  // Problems                                                    │
│  this.logger.warn('Rate limit close');                          │
│  this.logger.error('Failed', error);                            │
│                                                                 │
│  // Timing                                                      │
│  this.logger.timeStart('operation');                            │
│  // ... code ...                                                │
│  this.logger.timeEnd('operation'); // → "42ms"                  │
│                                                                 │
│  // Utilities                                                   │
│  this.logger.dump('State', obj);         // Pretty JSON         │
│  this.logger.separator();                // Line                │
│  this.logger.banner('IMPORTANT');        // With frame          │
│  this.logger.once('key', 'warn', 'Msg'); // Only one time       │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│  SYMBOLS                                                        │
├─────────────────────────────────────────────────────────────────┤
│  ✅  info    │  🔍  debug   │  ⚠️  warn    │  ❌  error       │
│  📐  formula │  📥  input   │  📤  output  │  🔌  device      │
│  🌐  api     │  🔄  flow    │  ⏱️  timer                      │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│  QUICK EXAMPLES                                                 │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  // Initialize                                                  │
│  this.logger = new Logger(this, 'MyDriver');                    │
│                                                                 │
│  // Formula with timing                                         │
│  this.logger.timeStart('formula');                              │
│  this.logger.input('Inputs:', { a, b });                        │
│  this.logger.formula('Evaluating: A AND B');                    │
│  const result = a && b;                                         │
│  this.logger.output('Result:', result);                         │
│  this.logger.timeEnd('formula');                                │
│                                                                 │
│  // API call with error handling                                │
│  this.logger.api('GET /devices');                               │
│  try {                                                          │
│    const data = await fetch(url);                               │
│    this.logger.api('Response:', data);                          │
│  } catch (error) {                                              │
│    this.logger.error('API failed', error);                      │
│  }                                                              │
│                                                                 │
│  // Device event                                                │
│  this.logger.device('Device added:', device.getName());         │
│                                                                 │
│  // Flow card                                                   │
│  this.logger.flow('Condition evaluated:', { result: true });    │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│  FILE STRUCTURE                                                 │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  lib/                                                           │
│  ├── Logger.js            ← Logger class                        │
│  ├── loggerConfig.js      ← Your config (optional)              │
│  └── BaseLogicDriver.js   ← Initialize here                     │
│                                                                 │
│  drivers/                                                       │
│  └── my-driver/                                                 │
│      └── driver.js         ← Use logger here                    │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│  DEVELOPMENT vs PRODUCTION                                      │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  Development (lib/loggerConfig.js):                             │
│  ┌───────────────────────────────────────────────────────────┐  │
│  │ module.exports = {                                        │  │
│  │   defaultLevel: 'DEBUG',  // See all                      │  │
│  │   categoryLevels: {                                       │  │
│  │     'BaseLogicDriver': 'INFO'  // Less noise              │  │
│  │   }                                                       │  │
│  │ };                                                        │  │
│  └───────────────────────────────────────────────────────────┘  │
│                                                                 │
│  Production (lib/loggerConfig.js):                              │
│  ┌───────────────────────────────────────────────────────────┐  │
│  │ module.exports = {                                        │  │
│  │   defaultLevel: 'WARN',   // Minimal logging              │  │
│  │   categoryLevels: {                                       │  │
│  │     'App': 'INFO'         // Important messages           │  │
│  │   }                                                       │  │
│  │ };                                                        │  │
│  └───────────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│  TROUBLESHOOTING                                                │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ❌ Problem: "Cannot read properties of undefined"             │
│  ✅ Solution: Logger not initialized                           │
│     → Add to onInit():                                          │
│       this.logger = new Logger(this, 'Name');                   │
│                                                                 │
│  ❌ Problem: Not seeing DEBUG messages                         │
│  ✅ Solution: Incorrect log level                              │
│     → Change in lib/loggerConfig.js:                            │
│       categoryLevels: { 'Name': 'DEBUG' }                       │
│                                                                 │
│  ❌ Problem: Config ignored                                    │
│  ✅ Solution: Level set in code                                │
│     → Remove { level: '...' } from new Logger()                 │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────┐
│  REMEMBER!                                                      │
├─────────────────────────────────────────────────────────────────┤
│  ✅ Initialize WITHOUT level parameter                         │
│  ✅ Use loggerConfig.js to control levels                      │ 
│  ✅ Use the right method for the right situation               │ 
│  ✅ Debug methods only show on DEBUG level                     │ 
│  ❌ Don't hardcode level in code                               │ 
│  ❌ Don't forget to initialize logger                          │
└─────────────────────────────────────────────────────────────────┘

────────────────────────────────────────────────────────────────────
📚 Full documentation: Logger_info.md 
⚡ Quick reference: Logger-QuickReference.md 
💡 Complete example: example-driver-complete.js
────────────────────────────────────────────────────────────────────
